// import { Bit } from '../types';
// import ArithmeticLogicUnit from '../ArithmeticLogicUnit';

// const { ON, OFF } = Bit;

// describe('ArithmeticLogicUnit', () => {
//   const NEGATIVE_ONE = [
//     ON,
//     ON,
//     ON,
//     ON,
//     ON,
//     ON,
//     ON,
//     ON,
//     ON,
//     ON,
//     ON,
//     ON,
//     ON,
//     ON,
//     ON,
//     ON,
//   ];

//   const ALL_OFF = [
//     OFF,
//     OFF,
//     OFF,
//     OFF,
//     OFF,
//     OFF,
//     OFF,
//     OFF,
//     OFF,
//     OFF,
//     OFF,
//     OFF,
//     OFF,
//     OFF,
//     OFF,
//     OFF,
//   ];

//   const ALL_ON = [
//     ON,
//     ON,
//     ON,
//     ON,
//     ON,
//     ON,
//     ON,
//     ON,
//     ON,
//     ON,
//     ON,
//     ON,
//     ON,
//     ON,
//     ON,
//     ON,
//   ];

//   const PARTIAL_ON = [
//     ON,
//     OFF,
//     OFF,
//     ON,
//     ON,
//     ON,
//     OFF,
//     ON,
//     OFF,
//     OFF,
//     OFF,
//     OFF,
//     ON,
//     ON,
//     OFF,
//     ON,
//   ];

//   const NEGATED_PARTIAL = [
//     OFF,
//     ON,
//     ON,
//     OFF,
//     OFF,
//     OFF,
//     ON,
//     OFF,
//     ON,
//     ON,
//     ON,
//     ON,
//     OFF,
//     OFF,
//     ON,
//     OFF,
//   ];

//   it.each`
//     x             | y             | result
//     ${ALL_OFF}    | ${ALL_OFF}    | ${ALL_OFF}
//     ${ALL_OFF}    | ${ALL_ON}     | ${ALL_OFF}
//     ${ALL_OFF}    | ${PARTIAL_ON} | ${ALL_OFF}
//     ${ALL_ON}     | ${ALL_OFF}    | ${ALL_OFF}
//     ${ALL_ON}     | ${ALL_ON}     | ${ALL_OFF}
//     ${ALL_ON}     | ${PARTIAL_ON} | ${ALL_OFF}
//     ${PARTIAL_ON} | ${ALL_OFF}    | ${ALL_OFF}
//     ${PARTIAL_ON} | ${ALL_ON}     | ${ALL_OFF}
//     ${PARTIAL_ON} | ${PARTIAL_ON} | ${ALL_OFF}
//   `('returns ALL OFF for all z options ON', ({ x, y, result }) => {
//     expect(
//       ArithmeticLogicUnit(x, y, {
//         zx: ON,
//         nx: OFF,
//         zy: ON,
//         ny: OFF,
//         f: ON,
//         no: OFF,
//       })
//     ).toEqual(result);
//   });

//   it.each`
//     x             | y             | result
//     ${ALL_OFF}    | ${ALL_OFF}    | ${ALL_ON}
//     ${ALL_OFF}    | ${ALL_ON}     | ${ALL_ON}
//     ${ALL_OFF}    | ${PARTIAL_ON} | ${ALL_ON}
//     ${ALL_ON}     | ${ALL_OFF}    | ${ALL_ON}
//     ${ALL_ON}     | ${ALL_ON}     | ${ALL_ON}
//     ${ALL_ON}     | ${PARTIAL_ON} | ${ALL_ON}
//     ${PARTIAL_ON} | ${ALL_OFF}    | ${ALL_ON}
//     ${PARTIAL_ON} | ${ALL_ON}     | ${ALL_ON}
//     ${PARTIAL_ON} | ${PARTIAL_ON} | ${ALL_ON}
//   `('returns ONE for all ON options', ({ x, y, result }) => {
//     expect(
//       ArithmeticLogicUnit(x, y, {
//         zx: ON,
//         nx: ON,
//         zy: ON,
//         ny: ON,
//         f: ON,
//         no: ON,
//       })
//     ).toEqual(result);
//   });

//   it.each`
//     x             | y             | result
//     ${ALL_OFF}    | ${ALL_OFF}    | ${NEGATIVE_ONE}
//     ${ALL_OFF}    | ${ALL_ON}     | ${NEGATIVE_ONE}
//     ${ALL_OFF}    | ${PARTIAL_ON} | ${NEGATIVE_ONE}
//     ${ALL_ON}     | ${ALL_OFF}    | ${NEGATIVE_ONE}
//     ${ALL_ON}     | ${ALL_ON}     | ${NEGATIVE_ONE}
//     ${ALL_ON}     | ${PARTIAL_ON} | ${NEGATIVE_ONE}
//     ${PARTIAL_ON} | ${ALL_OFF}    | ${NEGATIVE_ONE}
//     ${PARTIAL_ON} | ${ALL_ON}     | ${NEGATIVE_ONE}
//     ${PARTIAL_ON} | ${PARTIAL_ON} | ${NEGATIVE_ONE}
//   `(
//     'returns NEGATIVE_ONE for all zx, nx, zy, f ON options',
//     ({ x, y, result }) => {
//       expect(
//         ArithmeticLogicUnit(x, y, {
//           zx: ON,
//           nx: ON,
//           zy: ON,
//           ny: OFF,
//           f: ON,
//           no: OFF,
//         })
//       ).toEqual(result);
//     }
//   );

//   it.each`
//     x             | y             | result
//     ${ALL_OFF}    | ${ALL_OFF}    | ${ALL_OFF}
//     ${ALL_OFF}    | ${ALL_ON}     | ${ALL_OFF}
//     ${ALL_OFF}    | ${PARTIAL_ON} | ${ALL_OFF}
//     ${ALL_ON}     | ${ALL_OFF}    | ${ALL_ON}
//     ${ALL_ON}     | ${ALL_ON}     | ${ALL_ON}
//     ${ALL_ON}     | ${PARTIAL_ON} | ${ALL_ON}
//     ${PARTIAL_ON} | ${ALL_OFF}    | ${PARTIAL_ON}
//     ${PARTIAL_ON} | ${ALL_ON}     | ${PARTIAL_ON}
//     ${PARTIAL_ON} | ${PARTIAL_ON} | ${PARTIAL_ON}
//   `('returns x for all zy ny = ON options', ({ x, y, result }) => {
//     expect(
//       ArithmeticLogicUnit(x, y, {
//         zx: OFF,
//         nx: OFF,
//         zy: ON,
//         ny: ON,
//         f: OFF,
//         no: OFF,
//       })
//     ).toEqual(result);
//   });

//   it.each`
//     x             | y             | result
//     ${ALL_OFF}    | ${ALL_OFF}    | ${ALL_OFF}
//     ${ALL_OFF}    | ${ALL_ON}     | ${ALL_ON}
//     ${ALL_OFF}    | ${PARTIAL_ON} | ${PARTIAL_ON}
//     ${ALL_ON}     | ${ALL_OFF}    | ${ALL_OFF}
//     ${ALL_ON}     | ${ALL_ON}     | ${ALL_ON}
//     ${ALL_ON}     | ${PARTIAL_ON} | ${PARTIAL_ON}
//     ${PARTIAL_ON} | ${ALL_OFF}    | ${ALL_OFF}
//     ${PARTIAL_ON} | ${ALL_ON}     | ${ALL_ON}
//     ${PARTIAL_ON} | ${PARTIAL_ON} | ${PARTIAL_ON}
//   `('returns y for all zx nx = ON options', ({ x, y, result }) => {
//     expect(
//       ArithmeticLogicUnit(x, y, {
//         zx: ON,
//         nx: ON,
//         zy: OFF,
//         ny: OFF,
//         f: OFF,
//         no: OFF,
//       })
//     ).toEqual(result);
//   });

//   it.each`
//     x             | y             | result
//     ${ALL_OFF}    | ${ALL_OFF}    | ${ALL_ON}
//     ${ALL_OFF}    | ${ALL_ON}     | ${ALL_ON}
//     ${ALL_OFF}    | ${PARTIAL_ON} | ${ALL_ON}
//     ${ALL_ON}     | ${ALL_OFF}    | ${ALL_OFF}
//     ${ALL_ON}     | ${ALL_ON}     | ${ALL_OFF}
//     ${ALL_ON}     | ${PARTIAL_ON} | ${ALL_OFF}
//     ${PARTIAL_ON} | ${ALL_OFF}    | ${NEGATED_PARTIAL}
//     ${PARTIAL_ON} | ${ALL_ON}     | ${NEGATED_PARTIAL}
//     ${PARTIAL_ON} | ${PARTIAL_ON} | ${NEGATED_PARTIAL}
//   `('returns !x for all zy ny no = ON options', ({ x, y, result }) => {
//     expect(
//       ArithmeticLogicUnit(x, y, {
//         zx: OFF,
//         nx: OFF,
//         zy: ON,
//         ny: ON,
//         f: OFF,
//         no: ON,
//       })
//     ).toEqual(result);
//   });

//   it.each`
//     x             | y             | result
//     ${ALL_OFF}    | ${ALL_OFF}    | ${ALL_ON}
//     ${ALL_OFF}    | ${ALL_ON}     | ${ALL_OFF}
//     ${ALL_OFF}    | ${PARTIAL_ON} | ${NEGATED_PARTIAL}
//     ${ALL_ON}     | ${ALL_OFF}    | ${ALL_ON}
//     ${ALL_ON}     | ${ALL_ON}     | ${ALL_OFF}
//     ${ALL_ON}     | ${PARTIAL_ON} | ${NEGATED_PARTIAL}
//     ${PARTIAL_ON} | ${ALL_OFF}    | ${ALL_ON}
//     ${PARTIAL_ON} | ${ALL_ON}     | ${ALL_OFF}
//     ${PARTIAL_ON} | ${PARTIAL_ON} | ${NEGATED_PARTIAL}
//   `('returns !y for all zx nx no = ON options', ({ x, y, result }) => {
//     expect(
//       ArithmeticLogicUnit(x, y, {
//         zx: ON,
//         nx: ON,
//         zy: OFF,
//         ny: OFF,
//         f: OFF,
//         no: ON,
//       })
//     ).toEqual(result);
//   });

//   it.each`
//     x             | y             | result
//     ${ALL_OFF}    | ${ALL_OFF}    | ${ALL_OFF}
//     ${ALL_OFF}    | ${ALL_ON}     | ${ALL_OFF}
//     ${ALL_OFF}    | ${PARTIAL_ON} | ${ALL_OFF}
//     ${ALL_ON}     | ${ALL_OFF}    | ${ALL_OFF}
//     ${ALL_ON}     | ${ALL_ON}     | ${ALL_ON}
//     ${ALL_ON}     | ${PARTIAL_ON} | ${PARTIAL_ON}
//     ${PARTIAL_ON} | ${ALL_OFF}    | ${ALL_OFF}
//     ${PARTIAL_ON} | ${ALL_ON}     | ${PARTIAL_ON}
//     ${PARTIAL_ON} | ${PARTIAL_ON} | ${PARTIAL_ON}
//   `('returns AND logic for all off options', ({ x, y, result }) => {
//     expect(
//       ArithmeticLogicUnit(x, y, {
//         zx: OFF,
//         nx: OFF,
//         zy: OFF,
//         ny: OFF,
//         f: OFF,
//         no: OFF,
//       })
//     ).toEqual(result);
//   });

//   it.each`
//     x             | y             | result
//     ${ALL_OFF}    | ${ALL_OFF}    | ${ALL_OFF}
//     ${ALL_OFF}    | ${ALL_ON}     | ${ALL_OFF}
//     ${ALL_ON}     | ${ALL_OFF}    | ${ALL_OFF}
//     ${ALL_ON}     | ${ALL_ON}     | ${ALL_ON}
//     ${PARTIAL_ON} | ${ALL_OFF}    | ${ALL_OFF}
//     ${PARTIAL_ON} | ${ALL_ON}     | ${PARTIAL_ON}
//     ${PARTIAL_ON} | ${PARTIAL_ON} | ${PARTIAL_ON}
//   `('returns OR logic for n options ON', ({ x, y, result }) => {
//     expect(
//       ArithmeticLogicUnit(x, y, {
//         zx: OFF,
//         nx: ON,
//         zy: OFF,
//         ny: ON,
//         f: OFF,
//         no: ON,
//       })
//     ).toEqual(result);
//   });
// });
